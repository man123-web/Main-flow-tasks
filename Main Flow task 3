{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNijtWA1lO96Kuh1ARZGYak",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/man123-web/Main-flow-tasks/blob/main/Main%20Flow%20task%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pJa4l_E5GfvZ",
        "outputId": "1562ed65-c2ac-4778-bb33-033ab441b5f2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 8\n",
            "8 x 1 = 8\n",
            "8 x 2 = 16\n",
            "8 x 3 = 24\n",
            "8 x 4 = 32\n",
            "8 x 5 = 40\n",
            "8 x 6 = 48\n",
            "8 x 7 = 56\n",
            "8 x 8 = 64\n",
            "8 x 9 = 72\n",
            "8 x 10 = 80\n"
          ]
        }
      ],
      "source": [
        "def multiplication_table(n):\n",
        "    for i in range(1, 11):\n",
        "        print(f\"{n} x {i} = {n * i}\")\n",
        "\n",
        "# Example usage\n",
        "n = int(input(\"Enter a number: \"))\n",
        "multiplication_table(n)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def swap_numbers(a, b):\n",
        "    print(f\"Original values: a = {a}, b = {b}\")\n",
        "    a = a + b\n",
        "    b = a - b\n",
        "    a = a - b\n",
        "    print(f\"Swapped values: a = {a}, b = {b}\")\n",
        "\n",
        "# Example usage\n",
        "a = int(input(\"Enter first number (a): \"))\n",
        "b = int(input(\"Enter second number (b): \"))\n",
        "swap_numbers(a, b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7hiIs6bLHZGo",
        "outputId": "4e58e59f-9223-40a0-c18c-9f5180ff526f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter first number (a): 5\n",
            "Enter second number (b): 6\n",
            "Original values: a = 5, b = 6\n",
            "Swapped values: a = 6, b = 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_substring(s1, s2):\n",
        "    return s2 in s1\n",
        "\n",
        "# Example usage\n",
        "s1 = input(\"Enter the main string (s1): \")\n",
        "s2 = input(\"Enter the substring (s2): \")\n",
        "result = is_substring(s1, s2)\n",
        "print(f\"Is '{s2}' a substring of '{s1}'? {result}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A0uy9ZBaHjaz",
        "outputId": "c1ff010c-4f87-402b-b73c-a2ed41ede701"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the main string (s1): 3\n",
            "Enter the substring (s2): 4\n",
            "Is '4' a substring of '3'? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def decimal_to_binary(n):\n",
        "    return bin(n).replace(\"0b\", \"\")\n",
        "\n",
        "# Example usage\n",
        "n = int(input(\"Enter a decimal number: \"))\n",
        "binary_representation = decimal_to_binary(n)\n",
        "print(f\"The binary representation of {n} is {binary_representation}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ac1geG-_Hq4e",
        "outputId": "ad506a37-ad7c-414f-caeb-32dcdb7e24e3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a decimal number: 4\n",
            "The binary representation of 4 is 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def matrix_multiply(A, B):\n",
        "    # Get the dimensions of the matrices\n",
        "    rows_A = len(A)\n",
        "    cols_A = len(A[0])\n",
        "    rows_B = len(B)\n",
        "    cols_B = len(B[0])\n",
        "\n",
        "    # Initialize the result matrix with zeros\n",
        "    result = [[0 for _ in range(cols_B)] for _ in range(rows_A)]\n",
        "\n",
        "    # Perform matrix multiplication\n",
        "    for i in range(rows_A):\n",
        "        for j in range(cols_B):\n",
        "            for k in range(cols_A):  # or rows_B, since cols_A == rows_B\n",
        "                result[i][j] += A[i][k] * B[k][j]\n",
        "\n",
        "    return result\n",
        "\n",
        "# Example usage\n",
        "A = [[1, 2, 3], [4, 5, 6]]\n",
        "B = [[7, 8], [9, 10], [11, 12]]\n",
        "product_matrix = matrix_multiply(A, B)\n",
        "print(\"Product of matrices A and B:\")\n",
        "for row in product_matrix:\n",
        "    print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wEwUbbXtHvWL",
        "outputId": "274186af-f66a-4010-9f7b-cdca30516457"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Product of matrices A and B:\n",
            "[58, 64]\n",
            "[139, 154]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_second_largest(numbers):\n",
        "    if len(numbers) < 2:\n",
        "        return None  # Not enough elements for second largest\n",
        "\n",
        "    first, second = float('-inf'), float('-inf')\n",
        "\n",
        "    for number in numbers:\n",
        "        if number > first:\n",
        "            second = first\n",
        "            first = number\n",
        "        elif first > number > second:\n",
        "            second = number\n",
        "\n",
        "    return second if second != float('-inf') else None\n",
        "\n",
        "# Example usage\n",
        "numbers = [3, 1, 4, 4, 5, 2]\n",
        "second_largest = find_second_largest(numbers)\n",
        "print(f\"The second largest number is: {second_largest}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Djo94FiFIHrO",
        "outputId": "4ae29fac-dd06-4bfc-e465-26eeef2f3342"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The second largest number is: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def are_anagrams(s1, s2):\n",
        "    return sorted(s1) == sorted(s2)\n",
        "\n",
        "# Example usage\n",
        "s1 = input(\"Enter the first string: \")\n",
        "s2 = input(\"Enter the second string: \")\n",
        "result = are_anagrams(s1, s2)\n",
        "print(f\"Are '{s1}' and '{s2}' anagrams? {result}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u7pKWqRoIJJN",
        "outputId": "dd446360-92f6-4b82-ff9b-a8eb6a0bfffe"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the first string: 4\n",
            "Enter the second string: 5\n",
            "Are '4' and '5' anagrams? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def matrix_addition(A, B):\n",
        "    # Check if the dimensions of the two matrices are the same\n",
        "    if len(A) != len(B) or len(A[0]) != len(B[0]):\n",
        "        raise ValueError(\"Matrices must have the same dimensions for addition.\")\n",
        "\n",
        "    # Initialize the result matrix with zeros\n",
        "    result = [[0 for _ in range(len(A[0]))] for _ in range(len(A))]\n",
        "\n",
        "    # Perform matrix addition\n",
        "    for i in range(len(A)):\n",
        "        for j in range(len(A[0])):\n",
        "            result[i][j] = A[i][j] + B[i][j]\n",
        "\n",
        "    return result"
      ],
      "metadata": {
        "id": "o6hL2kq2Iiuk"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import random\n",
        "\n",
        "def print_board(board):\n",
        "    for row in board:\n",
        "        print(\" | \".join(row))\n",
        "        print(\"-\" * 9)\n",
        "\n",
        "def check_winner(board):\n",
        "    # Check rows, columns, and diagonals for a winner\n",
        "    for row in board:\n",
        "        if row[0] == row[1] == row[2] != \" \":\n",
        "            return row[0]\n",
        "    for col in range(3):\n",
        "        if board[0][col] == board[1][col] == board[2][col] != \" \":\n",
        "            return board[0][col]\n",
        "    if board[0][0] == board[1][1] == board[2][2] != \" \":\n",
        "        return board[0][0]\n",
        "    if board[0][2] == board[1][1] == board[2][0] != \" \":\n",
        "        return board[0][2]\n",
        "    return None\n",
        "\n",
        "def minimax(board, depth, is_maximizing):\n",
        "    winner = check_winner(board)\n",
        "    if winner == \"O\":  # AI is 'O'\n",
        "        return 1\n",
        "    elif winner == \"X\":  # Player is 'X'\n",
        "        return -1\n",
        "    elif all(cell != \" \" for row in board for cell in row):\n",
        "        return 0  # Draw\n",
        "\n",
        "    if is_maximizing:\n",
        "        best_score = float('-inf')\n",
        "        for i in range(3):\n",
        "            for j in range(3):\n",
        "                if board[i][j] == \" \":\n",
        "                    board[i][j] = \"O\"  # AI move\n",
        "                    score = minimax(board, depth + 1, False)\n",
        "                    board[i][j] = \" \"  # Undo move\n",
        "                    best_score = max(score, best_score)\n",
        "        return best_score\n",
        "    else:\n",
        "        best_score = float('inf')\n",
        "        for i in range(3):\n",
        "            for j in range(3):\n",
        "                if board[i][j] == \" \":\n",
        "                    board[i][j] = \"X\"  # Player move\n",
        "                    score = minimax(board, depth + 1, True)\n",
        "                    board[i][j] = \" \"  # Undo move\n",
        "                    best_score = min(score, best_score)\n",
        "        return best_score\n",
        "\n",
        "def best_move(board):\n",
        "    best_score = float('-inf')\n",
        "    move = (-1, -1)\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if board[i][j] == \" \":\n",
        "                board[i][j] = \"O\"  # AI move\n",
        "                score = minimax(board, 0, False)\n",
        "                board[i][j] = \" \"  # Undo move\n",
        "                if score > best_score:\n",
        "                    best_score = score\n",
        "                    move = (i, j)\n",
        "    return move\n",
        "\n",
        "def tic_tac_toe():\n",
        "    board = [[\" \" for _ in range(3)] for _ in range(3)]\n",
        "    print(\"Welcome to Tic-Tac-Toe!\")\n",
        "    print(\"You are 'X' and the AI is 'O'.\")\n",
        "\n",
        "    while True:\n",
        "        print_board(board)\n",
        "\n",
        "        # Player's turn\n",
        "        while True:\n",
        "            try:\n",
        "                row = int(input(\"Enter the row (0, 1, 2): \"))\n",
        "                col = int(input(\"Enter the column (0, 1, 2): \"))\n",
        "                if board[row][col] == \" \":\n",
        "                    board[row][col] = \"X\"  # Player move\n",
        "                    break\n",
        "                else:\n",
        "                    print(\"Cell already taken. Try again.\")\n",
        "            except (ValueError, IndexError):\n",
        "                print(\"Invalid input. Please enter row and column as 0, 1, or 2.\")\n",
        "\n",
        "        if check_winner(board):\n",
        "            print_board(board)\n",
        "            print(\"Congratulations! You win!\")\n",
        "            break\n",
        "\n",
        "        if all(cell != \" \" for row in board for cell in row):\n",
        "            print_board(board)\n",
        "            print(\"It's a draw!\")\n",
        "            break\n",
        "\n",
        "        # AI's turn\n",
        "        print(\"AI is making a move...\")\n",
        "        row, col = best_move(board)\n",
        "        board[row][col] = \"O\"  # AI move\n",
        "\n",
        "        if check_winner(board):\n",
        "            print_board(board)\n",
        "            print(\"AI wins! Better luck next time.\")\n",
        "            break\n",
        "\n",
        "        if all(cell != \" \" for row in board for cell in row):\n",
        "            print_board(board)\n",
        "            print(\"It's a draw!\")\n",
        "            break\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    tic_tac_toe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J6jOXnzjIrS8",
        "outputId": "d6c1ef78-4b45-48a2-efa0-633b6cd2ebf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Welcome to Tic-Tac-Toe!\n",
            "You are 'X' and the AI is 'O'.\n",
            "  |   |  \n",
            "---------\n",
            "  |   |  \n",
            "---------\n",
            "  |   |  \n",
            "---------\n",
            "Enter the row (0, 1, 2): 4\n",
            "Enter the column (0, 1, 2): 5\n",
            "Invalid input. Please enter row and column as 0, 1, or 2.\n",
            "Enter the row (0, 1, 2): 0\n"
          ]
        }
      ]
    }
  ]
}